{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["addToStorage","books","console","log","booksSON","JSON","stringify","localStorage","setItem","loadFromStorage","undefined","todos","booksLoaded","getItem","parse","BookCard","className","this","props","book","title","author","pages","status","onClick","toogleStatus","deleteBook","React","Component","NewBookForm","event","submitForm","closeForm","target","value","id","action","name","htmlFor","type","required","onChange","setTitle","bind","setAuthor","setPages","setStatus","handleSubmit","defaultProps","App","state","showForm","openForm","setState","index","i","length","slice","bookCards","map","key","displayed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.05238d2e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst addToStorage = (books) => {\n  console.log('adding');\n  let booksSON = JSON.stringify(books);\n  localStorage.setItem(\"books\",booksSON);\n  console.log(localStorage.books);\n}\n\nconst loadFromStorage = () => {\n  if(localStorage.books === undefined) {\n    addToStorage([]);\n  }\n  if(localStorage.books !== undefined || localStorage.todos !== []) {\n    let booksLoaded = localStorage.getItem(\"books\");\n    return (JSON.parse(booksLoaded));    \n  }\n}\n\nclass BookCard extends React.Component {\n  render() {\n    return (\n      <div className = 'book-card'>\n        <div className = 'book-detail'>{this.props.book.title}</div>\n        <div className = 'book-detail'>{this.props.book.author}</div>\n        <div className = 'book-detail'>{this.props.book.pages + ' pages'}</div>\n        <div className = 'book-card-tools'>\n          {\n          this.props.book.status === 'Read' \n          ? <button className = 'read' onClick = {() => this.props.toogleStatus(this.props.book)}>Read</button>\n          : <button className = 'not-read' onClick = {() => this.props.toogleStatus(this.props.book)}>Not Read</button> \n          }\n          <button className = 'delete' onClick = {() => {this.props.deleteBook(this.props.book)}}>Delete</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass NewBookForm extends React.Component {\n\n  handleSubmit(event) {\n    console.log(this.props.book);\n    this.props.submitForm(this.props.book);\n    this.props.closeForm();\n    // console.log(this.props);\n  }\n\n  setStatus(event) {\n    this.props.book.status = event.target.value;\n    console.log(this.props.book);\n  }\n\n  setTitle(event) {\n    this.props.book.title = event.target.value;\n  }\n\n  setAuthor(event) {\n    this.props.book.author = event.target.value;\n  }\n\n  setPages(event) {\n    this.props.book.pages = event.target.value;\n  }\n\n  render() {\n    return (\n      <div className=\"form-popup\" id=\"myForm\">\n        <form action=\"/action_page.php\" className=\"form-container\" name = \"myForm\">\n          <h1>Add Book</h1>\n      \n            <label htmlFor=\"title\"><b>Title</b></label>\n            <input \n              type=\"text\" \n              name=\"title\" \n              required \n              onChange = {this.setTitle.bind(this)}/>\n\n            <label htmlFor=\"author\"><b>Author</b></label>\n            <input type=\"text\" name=\"author\" required onChange = {this.setAuthor.bind(this)}/>\n      \n            <label htmlFor=\"pages\"><b>Pages</b></label>\n            <input type=\"number\" name=\"pages\" required onChange = {this.setPages.bind(this)}/>\n            \n            <div id = 'radio' onChange = {this.setStatus.bind(this)}>\n              <b>Have you read it ?</b>\n                <label htmlFor=\"yes\">\n                  <input type=\"radio\" id=\"yes\" name=\"read\" value=\"Read\"/>\n                  Yes\n                </label>\n                <label htmlFor=\"no\">\n                  <input type=\"radio\" id=\"no\" name=\"read\" value=\"Not Read\"/>\n                  No\n                </label>\n            </div>\n      \n            <button type=\"button\" className=\"btn\" onClick = {this.handleSubmit.bind(this)}>Add Book</button>\n            <button type=\"button\" className=\"btn cancel\" onClick = {this.props.closeForm}>Close</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nNewBookForm.defaultProps = {\n  book : {\n    title: '',\n    author: '',\n    pages: 0,\n    status: ''\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showForm : false,\n      books : []\n    };\n    this.openForm = this.openForm.bind(this);\n    this.closeForm = this.closeForm.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n    this.deleteBook = this.deleteBook.bind(this);\n    this.toogleStatus = this.toogleStatus.bind(this);\n  }\n  componentWillMount() {\n    this.setState({\n      books : loadFromStorage()\n    });\n  }\n  openForm() {\n    this.setState({\n      showForm : true\n    });\n    console.log(this.state.books);\n  }\n  closeForm() {\n    console.log('Trying....');\n    this.setState({\n      showForm : false\n    })\n    console.log('Closed...');\n  }\n  submitForm(book) {\n    this.setState({\n      books: [...this.state.books,book]\n    },() => console.log(this.state.books,addToStorage(this.state.books)));\n    console.log(this.state.books);\n  }\n  deleteBook(book) {\n    let books = [...this.state.books];\n    let index;\n    for(let i = 0; i < books.length; i++) {\n      if(books[i].name === book.name) {\n        index = i;\n        break;\n      }\n    }\n    books = [...books.slice(0,index),...books.slice(index + 1,books.length)]\n    this.setState({\n      books : books\n    },() => console.log(addToStorage(this.state.books)));\n  }\n  toogleStatus(book) {\n    let books = [...this.state.books];\n    let index;\n    for(let i = 0; i < books.length; i++) {\n      if(books[i].title === book.title) {\n        index = i;\n        break;\n      }\n    }\n    console.log(books[index].status);\n    // if(books[index].status === 'Read') {\n    //   books[index].status = 'Not Read';\n    // }\n    // if(books[index].status === 'Not Read') {\n    //   book[index].status = 'Read';\n    // }\n    console.log(books[index]);\n    books[index].status === 'Read' ? books[index].status = 'Not Read' : books[index].status = 'Read';\n    this.setState({\n      books : books\n    },() => console.log(addToStorage(this.state.books)));\n  }\n  render() {\n    const bookCards = this.state.books.map(book => <BookCard key = {book.title} book = {book} deleteBook = {this.deleteBook} toogleStatus = {this.toogleStatus} />)\n    console.log(this.state.books);\n    return (\n      <div className=\"App\">\n        <header id = 'heading-container'>\n              <h1 id = 'heading'>Library</h1>\n              <p id = 'heading-caption'>Ultimate Book Repository</p>\n        </header>\n        <main>\n            <div id = 'container'>\n              {\n                bookCards\n              }\n            </div>\n        </main>\n        <button \n          className=\"open-button\" \n          onClick={this.openForm}>Add New Book</button>\n        {this.state.showForm ? <NewBookForm displayed = {this.state.showForm} closeForm = {this.closeForm} submitForm = {this.submitForm}/> : null}\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}